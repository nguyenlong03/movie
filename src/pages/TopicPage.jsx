import { useParams } from "react-router-dom";
import { useState, useEffect } from "react";
import MovieCard from "../components/MovieCard";
import { ALL_MOVIES } from "../data/mockData";

const TopicPage = () => {
  const { topic } = useParams();
  const [movies, setMovies] = useState([]);
  const [loading, setLoading] = useState(true);

  // Ki·ªÉm tra n·∫øu topic kh√¥ng t·ªìn t·∫°i
  if (!topic) {
    return (
      <div className="min-h-screen bg-white dark:bg-gray-900 pt-20">
        <div className="container mx-auto px-4 py-8">
          <div className="text-center py-16">
            <div className="text-6xl mb-4">üé¨</div>
            <div className="text-gray-600 dark:text-gray-400 text-xl mb-4">
              Kh√¥ng t√¨m th·∫•y ch·ªß ƒë·ªÅ phim
            </div>
            <p className="text-gray-500">
              Vui l√≤ng ch·ªçn m·ªôt ch·ªß ƒë·ªÅ phim t·ª´ menu.
            </p>
          </div>
        </div>
      </div>
    );
  }

  // Mapping URL params to topic filters
  const topicMapping = {
    blockbuster: {
      name: "Phim Bom T·∫•n",
      emoji: "üé¨",
      description:
        "Nh·ªØng b·ªô phim c√≥ kinh ph√≠ s·∫£n xu·∫•t l·ªõn v√† ƒë∆∞·ª£c mong ƒë·ª£i nh·∫•t",
      filter: (movie) =>
        movie.rating >= 7.0 &&
        movie.year >= 2015 &&
        movie.genres &&
        [
          "H√†nh ƒê·ªông",
          "H√†nh ƒë·ªông",
          "Phi√™u L∆∞u",
          "Si√™u Anh H√πng",
          "Ly K·ª≥",
          "Bom T·∫•n",
          "Chi·∫øu R·∫°p",
          "Khoa H·ªçc Vi·ªÖn T∆∞·ªüng",
        ].some((genre) => movie.genres.includes(genre)),
    },
    classic: {
      name: "Phim Kinh ƒêi·ªÉn",
      emoji: "üèÜ",
      description:
        "Nh·ªØng t√°c ph·∫©m ƒëi·ªán ·∫£nh b·∫•t h·ªß ƒë∆∞·ª£c c√¥ng nh·∫≠n qua th·ªùi gian",
      filter: (movie) => movie.year <= 2005 && movie.rating >= 7.8,
    },
    independent: {
      name: "Phim ƒê·ªôc L·∫≠p",
      emoji: "üé≠",
      description: "Nh·ªØng b·ªô phim ngh·ªá thu·∫≠t v·ªõi phong c√°ch ƒë·∫°o di·ªÖn ƒë·ªôc ƒë√°o",
      filter: (movie) =>
        movie.genres &&
        ["Ch√≠nh K·ªãch", "Ch√≠nh k·ªãch", "T√¢m L√Ω", "Ngh·ªá Thu·∫≠t", "ƒê·ªôc L·∫≠p"].some(
          (genre) => movie.genres.includes(genre)
        ) &&
        movie.rating >= 7.0 &&
        movie.year >= 2010,
    },
    documentary: {
      name: "Phim T√†i Li·ªáu",
      emoji: "üìö",
      description: "Nh·ªØng b·ªô phim t√†i li·ªáu gi√°o d·ª•c v√† gi·∫£i tr√≠",
      filter: (movie) => movie.genres && movie.genres.includes("T√†i Li·ªáu"),
    },
    animation: {
      name: "Phim Ho·∫°t H√¨nh",
      emoji: "üé®",
      description: "Th·∫ø gi·ªõi ƒë·∫ßy m√†u s·∫Øc c·ªßa phim ho·∫°t h√¨nh cho m·ªçi l·ª©a tu·ªïi",
      filter: (movie) =>
        movie.genres &&
        (movie.genres.includes("Ho·∫°t H√¨nh") ||
          movie.genres.includes("Gia ƒê√¨nh") ||
          movie.title.includes("Animation") ||
          movie.title.includes("Ho·∫°t h√¨nh") ||
          movie.title.includes("Toy Story") ||
          movie.title.includes("Finding") ||
          movie.title.includes("Spirited") ||
          movie.title.includes("Frozen")),
    },
    romance: {
      name: "Phim T√¨nh C·∫£m",
      emoji: "üíï",
      description: "Nh·ªØng c√¢u chuy·ªán t√¨nh y√™u l√£ng m·∫°n v√† c·∫£m ƒë·ªông",
      filter: (movie) =>
        movie.genres &&
        (movie.genres.includes("T√¨nh C·∫£m") ||
          movie.genres.includes("L√£ng M·∫°n") ||
          movie.genres.includes("T√¨nh Y√™u")),
    },
    horror: {
      name: "Phim Kinh D·ªã",
      emoji: "üëª",
      description: "Nh·ªØng b·ªô phim g√¢y c·∫•n v√† ƒë·∫ßy h·ªìi h·ªôp",
      filter: (movie) =>
        movie.genres &&
        (movie.genres.includes("Kinh D·ªã") ||
          movie.genres.includes("Ma Qu√°i") ||
          movie.genres.includes("Thriller") ||
          movie.genres.includes("Si√™u Nhi√™n")),
    },
    comedy: {
      name: "Phim H√†i",
      emoji: "üòÇ",
      description: "Nh·ªØng b·ªô phim mang l·∫°i ti·∫øng c∆∞·ªùi v√† ni·ªÅm vui",
      filter: (movie) =>
        movie.genres &&
        (movie.genres.includes("H√†i") ||
          movie.genres.includes("H√†i H∆∞·ªõc") ||
          movie.genres.includes("H√†i K·ªãch")),
    },
    superhero: {
      name: "Phim Si√™u Anh H√πng",
      emoji: "ü¶∏",
      description: "Th·∫ø gi·ªõi c·ªßa nh·ªØng ng∆∞·ªùi h√πng v·ªõi s·ª©c m·∫°nh phi th∆∞·ªùng",
      filter: (movie) => movie.genres && movie.genres.includes("Si√™u Anh H√πng"),
    },
    "sci-fi": {
      name: "Phim Khoa H·ªçc Vi·ªÖn T∆∞·ªüng",
      emoji: "üöÄ",
      description: "Kh√°m ph√° t∆∞∆°ng lai v√† nh·ªØng kh·∫£ nƒÉng v√¥ h·∫°n c·ªßa khoa h·ªçc",
      filter: (movie) =>
        movie.genres && movie.genres.includes("Khoa H·ªçc Vi·ªÖn T∆∞·ªüng"),
    },
    action: {
      name: "Phim H√†nh ƒê·ªông",
      emoji: "üí•",
      description: "Nh·ªØng b·ªô phim h√†nh ƒë·ªông cƒÉng th·∫≥ng v√† k·ªãch t√≠nh",
      filter: (movie) =>
        movie.genres &&
        (movie.genres.includes("H√†nh ƒê·ªông") ||
          movie.genres.includes("H√†nh ƒë·ªông")),
    },
    drama: {
      name: "Phim Ch√≠nh K·ªãch",
      emoji: "üé™",
      description: "Nh·ªØng c√¢u chuy·ªán s√¢u s·∫Øc v·ªÅ cu·ªôc s·ªëng v√† con ng∆∞·ªùi",
      filter: (movie) =>
        movie.genres &&
        (movie.genres.includes("Ch√≠nh K·ªãch") ||
          movie.genres.includes("Ch√≠nh k·ªãch")),
    },
    thriller: {
      name: "Phim Ly K·ª≥",
      emoji: "üîç",
      description: "Nh·ªØng b·ªô phim cƒÉng th·∫≥ng v√† b√≠ ·∫©n",
      filter: (movie) =>
        movie.genres &&
        (movie.genres.includes("Ly K·ª≥") || movie.genres.includes("B√≠ ·∫®n")),
    },
    crime: {
      name: "Phim T·ªôi Ph·∫°m",
      emoji: "üïµÔ∏è",
      description: "Th·∫ø gi·ªõi t·ªôi ph·∫°m v√† nh·ªØng cu·ªôc ƒëi·ªÅu tra",
      filter: (movie) =>
        movie.genres &&
        (movie.genres.includes("T·ªôi Ph·∫°m") || movie.genres.includes("H√¨nh S·ª±")),
    },
    adventure: {
      name: "Phim Phi√™u L∆∞u",
      emoji: "üó∫Ô∏è",
      description: "Nh·ªØng cu·ªôc h√†nh tr√¨nh v√† kh√°m ph√° th√∫ v·ªã",
      filter: (movie) => movie.genres && movie.genres.includes("Phi√™u L∆∞u"),
    },
    fantasy: {
      name: "Phim Gi·∫£ T∆∞·ªüng",
      emoji: "üßô",
      description: "Th·∫ø gi·ªõi ph√©p thu·∫≠t v√† nh·ªØng ƒëi·ªÅu k·ª≥ di·ªáu",
      filter: (movie) =>
        movie.genres &&
        (movie.genres.includes("Gi·∫£ T∆∞·ªüng") ||
          movie.genres.includes("Ph√©p Thu·∫≠t")),
    },
    war: {
      name: "Phim Chi·∫øn Tranh",
      emoji: "‚öîÔ∏è",
      description: "Nh·ªØng c√¢u chuy·ªán v·ªÅ chi·∫øn tranh v√† l·ªãch s·ª≠",
      filter: (movie) =>
        movie.genres &&
        (movie.genres.includes("Chi·∫øn Tranh") ||
          movie.genres.includes("Qu√¢n S·ª±") ||
          movie.genres.includes("L·ªãch S·ª≠")),
    },
    family: {
      name: "Phim Gia ƒê√¨nh",
      emoji: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
      description: "Nh·ªØng b·ªô phim ph√π h·ª£p cho c·∫£ gia ƒë√¨nh",
      filter: (movie) => movie.genres && movie.genres.includes("Gia ƒê√¨nh"),
    },
    music: {
      name: "Phim √Çm Nh·∫°c",
      emoji: "üéµ",
      description: "Nh·ªØng b·ªô phim v·ªÅ √¢m nh·∫°c v√† ca nh·∫°c",
      filter: (movie) =>
        movie.genres &&
        (movie.genres.includes("√Çm Nh·∫°c") ||
          movie.genres.includes("Nh·∫°c K·ªãch")),
    },
    sport: {
      name: "Phim Th·ªÉ Thao",
      emoji: "üèÜ",
      description: "Nh·ªØng c√¢u chuy·ªán v·ªÅ th·ªÉ thao v√† v·∫≠n ƒë·ªông vi√™n",
      filter: (movie) => movie.genres && movie.genres.includes("Th·ªÉ Thao"),
    },
  };

  useEffect(() => {
    const filterMoviesByTopic = () => {
      setLoading(true);
      const topicData = topicMapping[topic];

      if (topicData) {
        const filteredMovies = ALL_MOVIES.filter(topicData.filter);
        setMovies(filteredMovies);
      } else {
        // Fallback cho c√°c ch·ªß ƒë·ªÅ ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
        // T·∫°o m·ªôt ch·ªß ƒë·ªÅ t·ª± ƒë·ªông d·ª±a tr√™n t√™n topic
        const generalFilter = (movie) => {
          if (!movie.genres || !topic) return false;

          // T√¨m ki·∫øm theo t√™n topic trong genres
          const topicKeywords = {
            love: ["T√¨nh C·∫£m", "L√£ng M·∫°n"],
            mystery: ["B√≠ ·∫®n", "Ly K·ª≥"],
            historical: ["L·ªãch S·ª≠"],
            biography: ["Ti·ªÉu S·ª≠"],
            western: ["Vi·ªÖn T√¢y"],
            musical: ["√Çm Nh·∫°c", "Nh·∫°c K·ªãch"],
          };

          const keywords = topicKeywords[topic] || [topic];
          return keywords.some((keyword) =>
            movie.genres.some(
              (genre) =>
                genre.toLowerCase().includes(keyword.toLowerCase()) ||
                keyword.toLowerCase().includes(genre.toLowerCase())
            )
          );
        };

        const filteredMovies = ALL_MOVIES.filter(generalFilter);
        setMovies(filteredMovies);
      }

      setLoading(false);
    };

    filterMoviesByTopic();
  }, [topic]);

  // T·∫°o topicData ƒë·ªông n·∫øu kh√¥ng t·ªìn t·∫°i
  const topicData = topicMapping[topic] || {
    name: `Phim ${
      topic ? topic.charAt(0).toUpperCase() + topic.slice(1) : "Kh√¥ng x√°c ƒë·ªãnh"
    }`,
    emoji: "üé¨",
    description: `Kh√°m ph√° nh·ªØng b·ªô phim hay thu·ªôc th·ªÉ lo·∫°i ${topic || "n√†y"}`,
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-white dark:bg-gray-900 pt-20">
        <div className="container mx-auto px-4 py-8">
          <div className="flex items-center justify-center h-64">
            <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-orange-500"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white dark:bg-gray-900 pt-20">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-4 flex items-center gap-3">
            <span className="text-5xl">{topicData.emoji}</span>
            {topicData.name}
          </h1>
          <p className="text-gray-600 dark:text-gray-300 text-lg">{topicData.description}</p>
          <div className="mt-4 bg-gradient-to-r from-orange-500 to-red-500 h-1 w-24 rounded"></div>
        </div>

        {/* Stats */}
        <div className="mb-8">
          <div className="bg-gray-100 dark:bg-gray-800 rounded-lg p-6">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className="text-center">
                <div className="text-3xl font-bold text-orange-500">
                  {movies.length}
                </div>
                <div className="text-gray-600 dark:text-gray-300">T·ªïng s·ªë phim</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-orange-500">
                  {movies.filter((m) => m.type === "movie").length}
                </div>
                <div className="text-gray-600 dark:text-gray-300">Phim l·∫ª</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-orange-500">
                  {movies.filter((m) => m.type === "series").length}
                </div>
                <div className="text-gray-600 dark:text-gray-300">Phim b·ªô</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-orange-500">
                  {movies.length > 0
                    ? (
                        movies.reduce((sum, movie) => sum + movie.rating, 0) /
                        movies.length
                      ).toFixed(1)
                    : "0"}
                </div>
                <div className="text-gray-600 dark:text-gray-300">ƒêi·ªÉm TB</div>
              </div>
            </div>
          </div>
        </div>

        {/* Filter Tabs */}
        <div className="mb-8">
          <div className="flex flex-wrap gap-2">
            <button className="px-4 py-2 bg-orange-500 text-white rounded-lg">
              T·∫•t c·∫£
            </button>
            <button className="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600">
              Phim l·∫ª
            </button>
            <button className="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600">
              Phim b·ªô
            </button>
            <button className="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600">
              M·ªõi nh·∫•t
            </button>
            <button className="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600">
              ƒê√°nh gi√° cao
            </button>
          </div>
        </div>

        {/* Movies Grid */}
        {movies.length > 0 ? (
          <>
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
              {movies.map((movie) => (
                <MovieCard key={movie.id} movie={movie} />
              ))}
            </div>

            {/* Top Rated Section */}
            {movies.filter((movie) => movie.rating >= 8.0).length > 0 && (
              <div className="mt-12">
                <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
                  {topicData.name} ƒë∆∞·ª£c ƒë√°nh gi√° cao
                </h2>
                <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                  {movies
                    .filter((movie) => movie.rating >= 8.0)
                    .slice(0, 6)
                    .map((movie) => (
                      <MovieCard key={`top-${movie.id}`} movie={movie} />
                    ))}
                </div>
              </div>
            )}

            {/* Recent Section */}
            {movies.filter((movie) => movie.year >= 2020).length > 0 && (
              <div className="mt-12">
                <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
                  {topicData.name} m·ªõi nh·∫•t
                </h2>
                <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                  {movies
                    .filter((movie) => movie.year >= 2020)
                    .sort((a, b) => b.year - a.year)
                    .slice(0, 6)
                    .map((movie) => (
                      <MovieCard key={`recent-${movie.id}`} movie={movie} />
                    ))}
                </div>
              </div>
            )}
          </>
        ) : (
          <div className="text-center py-16">
            <div className="text-6xl mb-4">{topicData.emoji}</div>
            <div className="text-gray-600 dark:text-gray-400 text-xl mb-4">
              Hi·ªán t·∫°i ch∆∞a c√≥ phim n√†o thu·ªôc ch·ªß ƒë·ªÅ{" "}
              {topicData.name.toLowerCase()}
            </div>
            <p className="text-gray-500 mb-6">
              Ch√∫ng t√¥i s·∫Ω c·∫≠p nh·∫≠t th√™m nhi·ªÅu phim thu·ªôc ch·ªß ƒë·ªÅ n√†y trong th·ªùi
              gian t·ªõi.
            </p>
            <div className="bg-gray-100 dark:bg-gray-800 rounded-lg p-6 max-w-md mx-auto">
              <h3 className="text-gray-900 dark:text-white font-semibold mb-2">G·ª£i √Ω cho b·∫°n:</h3>
              <p className="text-gray-600 dark:text-gray-400 text-sm">
                H√£y th·ª≠ kh√°m ph√° c√°c ch·ªß ƒë·ªÅ kh√°c nh∆∞ Bom t·∫•n, Kinh ƒëi·ªÉn, ho·∫∑c
                Ho·∫°t h√¨nh
              </p>
            </div>
          </div>
        )}

        {/* Recommended Section */}
        {movies.length > 0 && (
          <div className="mt-12">
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-6">
              ƒê∆∞·ª£c ƒë·ªÅ xu·∫•t cho b·∫°n
            </h2>
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
              {movies
                .sort((a, b) => b.rating - a.rating)
                .slice(0, 6)
                .map((movie) => (
                  <MovieCard key={`recommended-${movie.id}`} movie={movie} />
                ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TopicPage;
